<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Tutor Messages</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="/socket.io/socket.io.js"></script>
</head>
<body class="bg-gray-100 min-h-screen flex justify-center items-start pt-10 relative">

  <!-- Dashboard Button with Real-time Badge -->
  <div class="absolute top-4 right-4">
    <a href="/dashboard" class="bg-gradient-to-r from-blue-500 to-indigo-600 text-white px-5 py-2 rounded-lg shadow hover:from-blue-600 hover:to-indigo-700 transition duration-200 relative">
      üè† Dashboard
      <span id="globalUnseenBadge" class="absolute -top-2 -right-2 bg-red-500 text-white text-xs font-bold px-2 py-1 rounded-full hidden"></span>
    </a>
  </div>

  <!-- Message Container -->
  <div class="w-full max-w-sm bg-white rounded-lg shadow-md border border-gray-200">

    <!-- Header -->
    <div class="flex justify-between items-center px-4 py-3 border-b">
      <h1 class="text-lg font-bold text-gray-800">Tutor Messages</h1>
      <span id="totalUnseen" class="bg-red-500 text-white text-xs font-bold px-2 py-1 rounded-full hidden">0</span>
    </div>

    <!-- Message List -->
    <div id="messageList" class="divide-y">
      <% if (messages && messages.length > 0) { %>
        <% messages.forEach(msg => { %>
          <a href="/messages/<%= msg.senderId %>" class="block hover:bg-gray-50 transition message-item" data-contact-id="<%= msg.senderId %>">
            <div class="px-4 py-3 flex items-start space-x-3">
              <!-- Avatar/Icon -->
              <div class="w-10 h-10 flex items-center justify-center bg-blue-500 rounded-full text-white shadow">
                <% if (msg.avatar && msg.avatar !== 'uploads/default-avatar.jpg') { %>
                  <img src="<%= msg.avatar %>" alt="Avatar" class="w-10 h-10 rounded-full object-cover">
                <% } else { %>
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                      d="M8 10h.01M12 10h.01M16 10h.01M21 12c0 3.866-3.582 7-8 7a8.013 8.013 0 01-4.9-1.692L3 19l1.5-4.5A7.96 7.96 0 013 12c0-3.866 3.582-7 8-7s8 3.134 8 7z" />
                  </svg>
                <% } %>
              </div>

              <!-- Message Preview -->
              <div class="flex-1">
                <div class="flex justify-between items-center">
                  <p class="text-sm font-semibold text-gray-900">
                    <%= msg.username %>
                  </p>
                  <% if (msg.timestamp) { %>
                    <span class="text-xs text-gray-400">
                      <%= new Date(msg.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) %>
                    </span>
                  <% } %>
                </div>
                <div class="flex justify-between items-center">
                  <p class="text-xs text-gray-600 truncate">
                    <%= msg.text %>
                  </p>
                  <% if (msg.unseenCount > 0) { %>
                    <span class="ml-2 bg-red-500 text-white text-xs font-bold px-2 py-0.5 rounded-full unseen-badge" id="badge-<%= msg.senderId %>">
                      <%= msg.unseenCount %>
                    </span>
                  <% } else { %>
                    <span class="ml-2 bg-red-500 text-white text-xs font-bold px-2 py-0.5 rounded-full unseen-badge hidden" id="badge-<%= msg.senderId %>">0</span>
                  <% } %>
                </div>
              </div>
            </div>
          </a>
        <% }) %>
      <% } else { %>
        <div class="text-center text-gray-500 text-sm py-10">No messages available</div>
      <% } %>
    </div>
  </div>

  <script>
    const socket = io();
    // ‚úÖ SAFE: Handle cases where user might not be defined
    const currentUserId = '<%= (user && user.id) ? user.id : "" %>';

    // Initialize real-time messaging for tutor
    document.addEventListener('DOMContentLoaded', function() {
      if (currentUserId && currentUserId !== '') {
        console.log('üì® Tutor real-time messaging initialized for user:', currentUserId);
        
        // Join user's personal message room
        socket.emit('joinMessageRoom', currentUserId);
        
        // Request initial count
        socket.emit('requestUnseenCount', currentUserId);
        
        // Set up click handlers for message items
        document.querySelectorAll('.message-item').forEach(item => {
          item.addEventListener('click', function() {
            const contactId = this.getAttribute('data-contact-id');
            
            // Mark messages as seen when clicking on conversation
            socket.emit('markMessagesAsSeen', {
              userId: currentUserId,
              contactId: contactId
            });
          });
        });
      } else {
        console.warn('Tutor ID not available for real-time messaging');
      }
    });

    // Handle real-time unseen count updates
    socket.on('unseenCountUpdate', function(data) {
      console.log('üì® Tutor unseen count update:', data.count);
      const totalUnseen = document.getElementById('totalUnseen');
      const globalBadge = document.getElementById('globalUnseenBadge');
      
      if (data.count > 0) {
        totalUnseen.textContent = data.count;
        totalUnseen.classList.remove('hidden');
        
        globalBadge.textContent = data.count;
        globalBadge.classList.remove('hidden');
        
        // Update browser tab title
        document.title = `(${data.count}) Tutor Messages`;
      } else {
        totalUnseen.classList.add('hidden');
        globalBadge.classList.add('hidden');
        document.title = 'Tutor Messages';
      }
    });

    // Handle conversation-specific unseen count updates
    socket.on('conversationUnseenUpdate', function(data) {
      console.log('üì® Conversation update:', data);
      const badge = document.getElementById(`badge-${data.contactId}`);
      if (badge) {
        if (data.count > 0) {
          badge.textContent = data.count;
          badge.classList.remove('hidden');
        } else {
          badge.classList.add('hidden');
        }
      }
    });

    // Handle new message notifications
    socket.on('newMessageNotification', function(data) {
      console.log('üì® New message notification for tutor:', data);
      if (currentUserId && currentUserId !== '') {
        // Refresh counts when new message arrives
        socket.emit('requestUnseenCount', currentUserId);
        socket.emit('requestConversationUnseen', {
          userId: currentUserId,
          contactId: data.senderId
        });
        
        // Optional: Show desktop notification
        if (Notification.permission === 'granted') {
          new Notification(`New message from ${data.senderName}`, {
            body: data.message,
            icon: '/uploads/default-avatar.jpg'
          });
        }
      }
    });

    // Request notification permission
    if ('Notification' in window && Notification.permission === 'default') {
      Notification.requestPermission();
    }
  </script>

</body>
</html>