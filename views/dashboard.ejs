<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Tutor Dashboard - EduStream</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="/socket.io/socket.io.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    .stat-card {
      transition: all 0.3s ease;
    }
    .stat-card:hover {
      transform: translateY(-2px);
    }
    .live-pulse {
      animation: pulse 2s infinite;
    }
    @keyframes pulse {
      0% { transform: scale(1); }
      50% { transform: scale(1.05); }
      100% { transform: scale(1); }
    }
    .notice-card {
      border-left: 4px solid;
      transition: all 0.3s ease;
    }
    .notice-card:hover {
      transform: translateX(5px);
    }
    .modal-overlay {
      background: rgba(0, 0, 0, 0.5);
      backdrop-filter: blur(4px);
    }
    
    /* Flash message animations */
    .flash-message {
      transition: all 0.5s ease-in-out;
    }
    .flash-hide {
      opacity: 0;
      transform: translateX(100%);
    }
  </style>
</head>
<body class="bg-gray-50 min-h-screen">
  
  <!-- Flash Message -->
  <% if (successMessage && successMessage.length > 0) { %>
    <div class="flash-message fixed top-5 right-5 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50 flex items-center space-x-2">
      <i class="fas fa-check-circle"></i>
      <span><%= successMessage %></span>
      <button class="flash-close ml-2 hover:text-green-200">
        <i class="fas fa-times"></i>
      </button>
    </div>
  <% } %>

  <% if (errorMessage && errorMessage.length > 0) { %>
    <div class="flash-message fixed top-5 right-5 bg-red-500 text-white px-6 py-3 rounded-lg shadow-lg z-50 flex items-center space-x-2">
      <i class="fas fa-exclamation-circle"></i>
      <span><%= errorMessage %></span>
      <button class="flash-close ml-2 hover:text-red-200">
        <i class="fas fa-times"></i>
      </button>
    </div>
  <% } %>

  <!-- Header -->
  <header class="bg-white shadow-lg border-b border-gray-200">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex justify-between items-center py-4">
        <!-- Logo and Brand -->
        <div class="flex items-center space-x-3">
          <div class="bg-blue-500 text-white p-2 rounded-lg">
            <i class="fas fa-chalkboard-teacher text-xl"></i>
          </div>
          <div>
            <h1 class="text-2xl font-bold text-gray-800">Tutor Dashboard</h1>
            <p class="text-sm text-gray-500">Teach and inspire students</p>
          </div>
        </div>

        <!-- User Info and Actions -->
        <div class="flex items-center space-x-4">
          <!-- Messages -->
          <a href="/messages" class="bg-gray-100 p-2 rounded-lg hover:bg-gray-200 transition">
            <i class="fas fa-envelope text-gray-600"></i>
          </a>

          <!-- User Profile -->
          <div class="flex items-center space-x-3">
            <div class="text-right">
              <p class="text-sm font-medium text-gray-800"><%= tutor.name %></p>
              <p class="text-xs text-gray-500">Tutor</p>
            </div>
            <div class="w-10 h-10 rounded-full overflow-hidden border-2 border-blue-500">
              <img src="/<%= tutor.image %>" alt="<%= tutor.name %>" class="w-full h-full object-cover">
            </div>
          </div>

          <!-- Logout -->
          <a href="/logout" class="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition flex items-center space-x-2">
            <i class="fas fa-sign-out-alt"></i>
            <span>Logout</span>
          </a>
        </div>
      </div>
    </div>
  </header>

  <!-- Main Content -->
  <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
    
    <!-- Welcome Section -->
    <section class="bg-gradient-to-r from-blue-500 to-purple-600 rounded-2xl p-6 text-white mb-8">
      <div class="flex flex-col md:flex-row justify-between items-center">
        <div class="flex items-center space-x-4">
          <div class="w-16 h-16 rounded-full overflow-hidden border-3 border-white">
            <img src="/<%= tutor.image %>" alt="<%= tutor.name %>" class="w-full h-full object-cover">
          </div>
          <div>
            <h2 class="text-2xl font-bold">Welcome back, <%= tutor.name %>! ðŸ‘‹</h2>
            <p class="text-blue-100">Ready to inspire some students today?</p>
          </div>
        </div>
      </div>
    </section>

    <!-- Quick Actions -->
    <section class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
      <a href="/update" class="block">
        <div class="bg-white rounded-2xl shadow-sm border border-gray-200 p-6 hover:shadow-md transition cursor-pointer group">
          <div class="flex items-center space-x-4">
            <div class="bg-blue-100 p-3 rounded-lg group-hover:bg-blue-500 group-hover:text-white transition">
              <i class="fas fa-user-edit text-blue-500 group-hover:text-white text-xl"></i>
            </div>
            <div>
              <h3 class="font-semibold text-gray-800 group-hover:text-blue-600">Update Profile</h3>
              <p class="text-sm text-gray-500">Edit your information</p>
            </div>
          </div>
        </div>
      </a>

      <a href="/upload-course" class="block">
        <div class="bg-white rounded-2xl shadow-sm border border-gray-200 p-6 hover:shadow-md transition cursor-pointer group">
          <div class="flex items-center space-x-4">
            <div class="bg-orange-100 p-3 rounded-lg group-hover:bg-orange-500 group-hover:text-white transition">
              <i class="fas fa-upload text-orange-500 group-hover:text-white text-xl"></i>
            </div>
            <div>
              <h3 class="font-semibold text-gray-800 group-hover:text-orange-600">Upload Course</h3>
              <p class="text-sm text-gray-500">Share new content</p>
            </div>
          </div>
        </div>
      </a>

      <a href="/my-course" class="block">
        <div class="bg-white rounded-2xl shadow-sm border border-gray-200 p-6 hover:shadow-md transition cursor-pointer group">
          <div class="flex items-center space-x-4">
            <div class="bg-teal-100 p-3 rounded-lg group-hover:bg-teal-500 group-hover:text-white transition">
              <i class="fas fa-play-circle text-teal-500 group-hover:text-white text-xl"></i>
            </div>
            <div>
              <h3 class="font-semibold text-gray-800 group-hover:text-teal-600">My Courses</h3>
              <p class="text-sm text-gray-500">Manage your content</p>
            </div>
          </div>
        </div>
      </a>

      <a href="/messages" class="block">
        <div class="bg-white rounded-2xl shadow-sm border border-gray-200 p-6 hover:shadow-md transition cursor-pointer group">
          <div class="flex items-center space-x-4">
            <div class="bg-purple-100 p-3 rounded-lg group-hover:bg-purple-500 group-hover:text-white transition">
              <i class="fas fa-comments text-purple-500 group-hover:text-white text-xl"></i>
            </div>
            <div>
              <h3 class="font-semibold text-gray-800 group-hover:text-purple-600">Messages</h3>
              <p class="text-sm text-gray-500">Student inquiries</p>
            </div>
          </div>
        </div>
      </a>
    </section>

    <!-- Notices Section -->
    <section class="bg-white rounded-2xl shadow-sm border border-gray-200 p-6 mb-8">
      <div class="flex justify-between items-center mb-6">
        <h2 class="text-xl font-bold text-gray-800 flex items-center space-x-2">
          <i class="fas fa-bullhorn text-yellow-500"></i>
          <span>Important Notices</span>
        </h2>
        <button id="addNoticeBtn" class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition flex items-center space-x-2">
          <i class="fas fa-plus"></i>
          <span>Add Notice</span>
        </button>
      </div>

      <!-- Notices List -->
      <div id="noticesContainer" class="space-y-4">
        <% if (notices && notices.length > 0) { %>
          <% notices.forEach(notice => { %>
            <div class="notice-card bg-gray-50 border-l-4 border-<%= notice.priority === 'high' ? 'red' : notice.priority === 'medium' ? 'yellow' : 'blue' %>-500 p-4 rounded-r-lg">
              <div class="flex justify-between items-start mb-2">
                <h3 class="font-semibold text-gray-800"><%= notice.title %></h3>
                <div class="flex items-center space-x-2">
                  <span class="text-xs px-2 py-1 rounded-full bg-<%= notice.priority === 'high' ? 'red' : notice.priority === 'medium' ? 'yellow' : 'blue' %>-100 text-<%= notice.priority === 'high' ? 'red' : notice.priority === 'medium' ? 'yellow' : 'blue' %>-800">
                    <%= notice.priority.toUpperCase() %>
                  </span>
                  <button class="delete-notice-btn text-red-500 hover:text-red-700 transition" data-id="<%= notice._id %>">
                    <i class="fas fa-trash"></i>
                  </button>
                </div>
              </div>
              <p class="text-gray-600 text-sm mb-2"><%= notice.message %></p>
              <div class="flex justify-between items-center text-xs text-gray-500">
                <span>Created: <%= new Date(notice.createdAt).toLocaleDateString() %></span>
                <span>Expires: <%= new Date(notice.deleteDate).toLocaleDateString() %></span>
              </div>
            </div>
          <% }) %>
        <% } else { %>
          <div class="text-center py-8 text-gray-500">
            <i class="fas fa-bullhorn text-4xl mb-3 text-gray-300"></i>
            <p>No notices yet. Add your first notice!</p>
          </div>
        <% } %>
      </div>
    </section>

    <!-- Live Stream Section -->
    <section class="bg-white rounded-2xl shadow-sm border border-gray-200 p-6 mb-8">
      <div class="flex justify-between items-center mb-6">
        <h2 class="text-xl font-bold text-gray-800 flex items-center space-x-2">
          <i class="fas fa-broadcast-tower text-red-500"></i>
          <span>Live Streaming</span>
        </h2>
        <div id="liveIndicator" class="flex items-center space-x-2 <%= tutor.isLive ? 'text-red-500' : 'text-gray-500' %>">
          <i class="fas fa-circle <%= tutor.isLive ? 'live-pulse' : '' %>"></i>
          <span class="text-sm font-semibold">
            <%= tutor.isLive ? 'LIVE NOW' : 'OFFLINE' %>
          </span>
        </div>
      </div>

      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <!-- Live Controls -->
        <div class="space-y-6">
          <% if (tutor.isLive) { %>
            <!-- Currently Live View -->
            <div class="bg-green-50 border border-green-200 rounded-xl p-6">
              <div class="flex items-center space-x-3 mb-4">
                <div class="bg-green-500 text-white p-2 rounded-lg">
                  <i class="fas fa-broadcast-tower"></i>
                </div>
                <div>
                  <h3 class="font-semibold text-green-800">You're Live! ðŸŽ‰</h3>
                  <p class="text-green-600 text-sm">Students can now join your session</p>
                </div>
              </div>
              
              <div class="bg-white rounded-lg p-4 border border-green-100">
                <div class="flex items-center justify-between mb-3">
                  <span class="text-sm text-gray-600">Current Viewers:</span>
                  <span class="text-lg font-bold text-green-600" id="viewerCountDisplay"><%= viewerCount || 0 %></span>
                </div>
                <div class="flex items-center justify-between">
                  <span class="text-sm text-gray-600">Session Duration:</span>
                  <span class="text-sm font-medium text-gray-800" id="sessionTimer">00:00:00</span>
                </div>
              </div>

              <div class="flex space-x-3 mt-4">
                <a href="/tutor-live/<%= tutor._id %>" 
                   class="flex-1 bg-blue-500 text-white py-3 px-4 rounded-lg hover:bg-blue-600 transition text-center font-semibold">
                  <i class="fas fa-tv mr-2"></i>Go to Studio
                </a>
                <button id="stopLiveBtn" 
                        class="flex-1 bg-red-500 text-white py-3 px-4 rounded-lg hover:bg-red-600 transition font-semibold">
                  <i class="fas fa-stop mr-2"></i>End Live
                </button>
              </div>
            </div>
          <% } else { %>
            <!-- Start Live Session -->
            <div class="bg-blue-50 border border-blue-200 rounded-xl p-6">
              <div class="flex items-center space-x-3 mb-4">
                <div class="bg-blue-500 text-white p-2 rounded-lg">
                  <i class="fas fa-video"></i>
                </div>
                <div>
                  <h3 class="font-semibold text-blue-800">Start Live Session</h3>
                  <p class="text-blue-600 text-sm">Go live and teach students in real-time</p>
                </div>
              </div>

              <div class="space-y-3">
                <div class="flex items-center space-x-2 text-sm text-gray-600">
                  <i class="fas fa-check text-green-500"></i>
                  <span>Share your screen and camera</span>
                </div>
                <div class="flex items-center space-x-2 text-sm text-gray-600">
                  <i class="fas fa-check text-green-500"></i>
                  <span>Interactive whiteboard</span>
                </div>
                <div class="flex items-center space-x-2 text-sm text-gray-600">
                  <i class="fas fa-check text-green-500"></i>
                  <span>Real-time chat with students</span>
                </div>
              </div>

              <button id="startLiveBtn" 
                      class="w-full bg-green-500 text-white py-3 px-4 rounded-lg hover:bg-green-600 transition font-semibold mt-4">
                <i class="fas fa-play mr-2"></i>Start Live Session
              </button>
            </div>
          <% } %>

          <!-- Quick Tips -->
          <div class="bg-gray-50 border border-gray-200 rounded-xl p-4">
            <h4 class="font-semibold text-gray-800 mb-2 flex items-center space-x-2">
              <i class="fas fa-lightbulb text-yellow-500"></i>
              <span>Live Session Tips</span>
            </h4>
            <ul class="text-sm text-gray-600 space-y-1">
              <li>â€¢ Test your audio and video before starting</li>
              <li>â€¢ Share relevant materials in advance</li>
              <li>â€¢ Engage with students through chat</li>
              <li>â€¢ Record sessions for later review</li>
            </ul>
          </div>
        </div>

        <!-- Live Preview & Stats -->
        <div class="space-y-6">
          <!-- Preview -->
          <div class="bg-gray-900 rounded-xl overflow-hidden">
            <div class="aspect-w-16 aspect-h-9 bg-black flex items-center justify-center">
              <% if (tutor.isLive) { %>
                <div class="text-center text-white p-6">
                  <i class="fas fa-broadcast-tower text-red-500 text-4xl mb-3"></i>
                  <p class="font-semibold">Live Stream Active</p>
                  <p class="text-gray-400 text-sm mt-1">Students are watching your stream</p>
                </div>
              <% } else { %>
                <div class="text-center text-gray-400 p-6">
                  <i class="fas fa-video-slash text-4xl mb-3"></i>
                  <p class="font-semibold">Offline</p>
                  <p class="text-sm mt-1">Start a live session to begin streaming</p>
                </div>
              <% } %>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Add Notice Modal -->
    <div id="noticeModal" class="fixed inset-0 z-50 hidden">
      <div class="modal-overlay absolute inset-0 flex items-center justify-center p-4">
        <div class="bg-white rounded-2xl shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto">
          <div class="flex items-center justify-between p-6 border-b border-gray-200">
            <h3 class="text-xl font-semibold text-gray-800">Add New Notice</h3>
            <button id="closeModalBtn" class="text-gray-400 hover:text-gray-600 transition">
              <i class="fas fa-times text-xl"></i>
            </button>
          </div>

          <form id="noticeForm" class="p-6">
            <div class="space-y-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Notice Title</label>
                <input type="text" id="noticeTitle" required 
                       class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Message</label>
                <textarea id="noticeMessage" rows="4" required
                          class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none"
                          placeholder="Enter your notice message..."></textarea>
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Priority</label>
                <select id="noticePriority" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                  <option value="low">Low</option>
                  <option value="medium">Medium</option>
                  <option value="high">High</option>
                </select>
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Auto Delete Date</label>
                <input type="date" id="noticeDeleteDate" required
                       class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
              </div>
            </div>

            <div class="flex space-x-3 mt-6">
              <button type="button" id="cancelNoticeBtn" 
                      class="flex-1 bg-gray-100 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-200 transition font-medium">
                Cancel
              </button>
              <button type="submit" 
                      class="flex-1 bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition font-medium">
                Add Notice
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
   
  </main>

  <!-- Socket and Live Streaming Script -->
  <script>
    const socket = io();
    const tutorId = '<%= tutor._id %>';
    let sessionStartTime = null;
    let sessionTimer = null;

    // Flash Message Auto-disappearance
    function initializeFlashMessages() {
      const flashMessages = document.querySelectorAll('.flash-message');
      
      flashMessages.forEach(message => {
        // Add close button functionality
        const closeBtn = message.querySelector('.flash-close');
        if (closeBtn) {
          closeBtn.addEventListener('click', () => {
            hideFlashMessage(message);
          });
        }
        
        // Auto-hide after 5 seconds
        setTimeout(() => {
          hideFlashMessage(message);
        }, 5000);
      });
    }

    function hideFlashMessage(message) {
      message.classList.add('flash-hide');
      setTimeout(() => {
        if (message.parentNode) {
          message.parentNode.removeChild(message);
        }
      }, 500); // Wait for animation to complete
    }

    // Initialize flash messages when page loads
    document.addEventListener('DOMContentLoaded', initializeFlashMessages);

    // Notice Modal Functionality
    const noticeModal = document.getElementById('noticeModal');
    const addNoticeBtn = document.getElementById('addNoticeBtn');
    const closeModalBtn = document.getElementById('closeModalBtn');
    const cancelNoticeBtn = document.getElementById('cancelNoticeBtn');
    const noticeForm = document.getElementById('noticeForm');

    // Open modal
    addNoticeBtn.addEventListener('click', () => {
      noticeModal.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
      
      // Set minimum date to tomorrow
      const tomorrow = new Date();
      tomorrow.setDate(tomorrow.getDate() + 1);
      document.getElementById('noticeDeleteDate').min = tomorrow.toISOString().split('T')[0];
    });

    // Close modal
    function closeModal() {
      noticeModal.classList.add('hidden');
      document.body.style.overflow = 'auto';
      noticeForm.reset();
    }

    closeModalBtn.addEventListener('click', closeModal);
    cancelNoticeBtn.addEventListener('click', closeModal);

    // Close modal when clicking outside
    noticeModal.addEventListener('click', (e) => {
      if (e.target === noticeModal) closeModal();
    });

    // Handle notice form submission
    noticeForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = {
        title: document.getElementById('noticeTitle').value,
        message: document.getElementById('noticeMessage').value,
        priority: document.getElementById('noticePriority').value,
        deleteDate: document.getElementById('noticeDeleteDate').value
      };

      try {
        const response = await fetch('/notices', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(formData)
        });

        const result = await response.json();

        if (result.success) {
          closeModal();
          location.reload(); // Reload to show new notice
        } else {
          alert('Error adding notice: ' + result.message);
        }
      } catch (error) {
        console.error('Error adding notice:', error);
        alert('Error adding notice. Please try again.');
      }
    });

    // Delete notice
    document.querySelectorAll('.delete-notice-btn').forEach(btn => {
      btn.addEventListener('click', async function() {
        const noticeId = this.getAttribute('data-id');
        
        if (!confirm('Are you sure you want to delete this notice?')) return;

        try {
          const response = await fetch(`/notices/${noticeId}`, {
            method: 'DELETE'
          });

          const result = await response.json();

          if (result.success) {
            this.closest('.notice-card').remove();
            
            // If no notices left, show empty state
            if (document.querySelectorAll('.notice-card').length === 0) {
              document.getElementById('noticesContainer').innerHTML = `
                <div class="text-center py-8 text-gray-500">
                  <i class="fas fa-bullhorn text-4xl mb-3 text-gray-300"></i>
                  <p>No notices yet. Add your first notice!</p>
                </div>
              `;
            }
          } else {
            alert('Error deleting notice: ' + result.message);
          }
        } catch (error) {
          console.error('Error deleting notice:', error);
          alert('Error deleting notice. Please try again.');
        }
      });
    });

    // Start Live Session
    document.getElementById('startLiveBtn')?.addEventListener('click', async () => {
      try {
        const response = await fetch('/start-live', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' }
        });
        
        const result = await response.json();
        
        if (result.success) {
          // Redirect to live studio
          window.location.href = result.liveUrl;
        } else {
          alert('Error starting live session: ' + result.message);
        }
      } catch (err) {
        console.error("Error starting live:", err);
        alert("Error starting live session. Please try again.");
      }
    });

    // Stop Live Session
    document.getElementById('stopLiveBtn')?.addEventListener('click', async () => {
      if (!confirm('Are you sure you want to end the live session?')) return;
      
      try {
        const response = await fetch('/stop-live', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' }
        });
        
        const result = await response.json();
        
        if (result.success) {
          location.reload();
        } else {
          alert('Error stopping live session: ' + result.message);
        }
      } catch (err) {
        console.error("Error stopping live:", err);
        alert("Error stopping live session. Please try again.");
      }
    });

    // Real-time viewer count updates
    socket.on('viewerCountUpdate', (count) => {
      const viewerElements = [
        document.getElementById('currentViewers'),
        document.getElementById('viewerCountDisplay')
      ];
      
      viewerElements.forEach(element => {
        if (element) element.textContent = count;
      });
    });

    // Session timer
    function startSessionTimer() {
      sessionStartTime = new Date();
      sessionTimer = setInterval(() => {
        const now = new Date();
        const diff = now - sessionStartTime;
        const hours = Math.floor(diff / 3600000);
        const minutes = Math.floor((diff % 3600000) / 60000);
        const seconds = Math.floor((diff % 60000) / 1000);
        
        const timerElement = document.getElementById('sessionTimer');
        if (timerElement) {
          timerElement.textContent = 
            `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }
      }, 1000);
    }

    // Start session timer if live
   
  </script>
</body>
</html>